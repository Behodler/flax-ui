/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface URIAdminInterface extends utils.Interface {
  functions: {
    "baseURI()": FunctionFragment;
    "deleteAdmin()": FunctionFragment;
    "updateBaseURI(string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "baseURI" | "deleteAdmin" | "updateBaseURI"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "baseURI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deleteAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateBaseURI",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "baseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deleteAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBaseURI",
    data: BytesLike
  ): Result;

  events: {
    "URIAdminDeleted(address)": EventFragment;
    "URISet(string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "URIAdminDeleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URISet"): EventFragment;
}

export interface URIAdminDeletedEventObject {
  _admin: string;
}
export type URIAdminDeletedEvent = TypedEvent<
  [string],
  URIAdminDeletedEventObject
>;

export type URIAdminDeletedEventFilter = TypedEventFilter<URIAdminDeletedEvent>;

export interface URISetEventObject {
  newURI: string;
}
export type URISetEvent = TypedEvent<[string], URISetEventObject>;

export type URISetEventFilter = TypedEventFilter<URISetEvent>;

export interface URIAdmin extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: URIAdminInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    baseURI(overrides?: CallOverrides): Promise<[string]>;

    deleteAdmin(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateBaseURI(
      _uri: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  baseURI(overrides?: CallOverrides): Promise<string>;

  deleteAdmin(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateBaseURI(
    _uri: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    baseURI(overrides?: CallOverrides): Promise<string>;

    deleteAdmin(overrides?: CallOverrides): Promise<void>;

    updateBaseURI(_uri: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "URIAdminDeleted(address)"(_admin?: null): URIAdminDeletedEventFilter;
    URIAdminDeleted(_admin?: null): URIAdminDeletedEventFilter;

    "URISet(string)"(newURI?: null): URISetEventFilter;
    URISet(newURI?: null): URISetEventFilter;
  };

  estimateGas: {
    baseURI(overrides?: CallOverrides): Promise<BigNumber>;

    deleteAdmin(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    updateBaseURI(
      _uri: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    baseURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deleteAdmin(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateBaseURI(
      _uri: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
