/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace StdInvariant {
  export type FuzzArtifactSelectorStruct = {
    artifact: string;
    selectors: BytesLike[];
  };

  export type FuzzArtifactSelectorStructOutput = [string, string[]] & {
    artifact: string;
    selectors: string[];
  };

  export type FuzzInterfaceStruct = { addr: string; artifacts: string[] };

  export type FuzzInterfaceStructOutput = [string, string[]] & {
    addr: string;
    artifacts: string[];
  };

  export type FuzzSelectorStruct = { addr: string; selectors: BytesLike[] };

  export type FuzzSelectorStructOutput = [string, string[]] & {
    addr: string;
    selectors: string[];
  };
}

export interface TiltInterface extends utils.Interface {
  functions: {
    "IS_TEST()": FunctionFragment;
    "excludeArtifacts()": FunctionFragment;
    "excludeContracts()": FunctionFragment;
    "excludeSenders()": FunctionFragment;
    "failed()": FunctionFragment;
    "getEnvUint(string)": FunctionFragment;
    "roiArray(uint256)": FunctionFragment;
    "setUp()": FunctionFragment;
    "targetArtifactSelectors()": FunctionFragment;
    "targetArtifacts()": FunctionFragment;
    "targetContracts()": FunctionFragment;
    "targetInterfaces()": FunctionFragment;
    "targetSelectors()": FunctionFragment;
    "targetSenders()": FunctionFragment;
    "termLength(uint256)": FunctionFragment;
    "test2xFlxDeduction()": FunctionFragment;
    "testAddingFlaxToTilterAsNotOwnerFails()": FunctionFragment;
    "testChoice0()": FunctionFragment;
    "testChoice1()": FunctionFragment;
    "testChoice2()": FunctionFragment;
    "testChoice3()": FunctionFragment;
    "testChoice4()": FunctionFragment;
    "testEthWhale()": FunctionFragment;
    "testInvalidTermChoiceFails()": FunctionFragment;
    "testMinimumEth()": FunctionFragment;
    "testRepeatTilting()": FunctionFragment;
    "testSetupWorked()": FunctionFragment;
    "testTooLittleEthFails()": FunctionFragment;
    "test_try_tilt_by_adding_flax_via_regular_ERC20_transfer()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "IS_TEST"
      | "excludeArtifacts"
      | "excludeContracts"
      | "excludeSenders"
      | "failed"
      | "getEnvUint"
      | "roiArray"
      | "setUp"
      | "targetArtifactSelectors"
      | "targetArtifacts"
      | "targetContracts"
      | "targetInterfaces"
      | "targetSelectors"
      | "targetSenders"
      | "termLength"
      | "test2xFlxDeduction"
      | "testAddingFlaxToTilterAsNotOwnerFails"
      | "testChoice0"
      | "testChoice1"
      | "testChoice2"
      | "testChoice3"
      | "testChoice4"
      | "testEthWhale"
      | "testInvalidTermChoiceFails"
      | "testMinimumEth"
      | "testRepeatTilting"
      | "testSetupWorked"
      | "testTooLittleEthFails"
      | "test_try_tilt_by_adding_flax_via_regular_ERC20_transfer"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "IS_TEST", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "excludeArtifacts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "excludeContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "excludeSenders",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "failed", values?: undefined): string;
  encodeFunctionData(functionFragment: "getEnvUint", values: [string]): string;
  encodeFunctionData(
    functionFragment: "roiArray",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setUp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "targetArtifactSelectors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetArtifacts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetInterfaces",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetSelectors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetSenders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "termLength",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "test2xFlxDeduction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testAddingFlaxToTilterAsNotOwnerFails",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testChoice0",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testChoice1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testChoice2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testChoice3",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testChoice4",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testEthWhale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testInvalidTermChoiceFails",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testMinimumEth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRepeatTilting",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testSetupWorked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testTooLittleEthFails",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_try_tilt_by_adding_flax_via_regular_ERC20_transfer",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "IS_TEST", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "excludeArtifacts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeSenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "failed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getEnvUint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "roiArray", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "targetArtifactSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetArtifacts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetInterfaces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetSenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "termLength", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "test2xFlxDeduction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testAddingFlaxToTilterAsNotOwnerFails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testChoice0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testChoice1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testChoice2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testChoice3",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testChoice4",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testEthWhale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testInvalidTermChoiceFails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testMinimumEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRepeatTilting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testSetupWorked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testTooLittleEthFails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_try_tilt_by_adding_flax_via_regular_ERC20_transfer",
    data: BytesLike
  ): Result;

  events: {
    "amountOut(uint256)": EventFragment;
    "ethPurchased(uint256,uint256)": EventFragment;
    "flaxPerEth(uint256,uint256)": EventFragment;
    "log(string)": EventFragment;
    "log_address(address)": EventFragment;
    "log_array(uint256[])": EventFragment;
    "log_array(int256[])": EventFragment;
    "log_array(address[])": EventFragment;
    "log_bytes(bytes)": EventFragment;
    "log_bytes32(bytes32)": EventFragment;
    "log_int(int256)": EventFragment;
    "log_named_address(string,address)": EventFragment;
    "log_named_array(string,uint256[])": EventFragment;
    "log_named_array(string,int256[])": EventFragment;
    "log_named_array(string,address[])": EventFragment;
    "log_named_bytes(string,bytes)": EventFragment;
    "log_named_bytes32(string,bytes32)": EventFragment;
    "log_named_decimal_int(string,int256,uint256)": EventFragment;
    "log_named_decimal_uint(string,uint256,uint256)": EventFragment;
    "log_named_int(string,int256)": EventFragment;
    "log_named_string(string,string)": EventFragment;
    "log_named_uint(string,uint256)": EventFragment;
    "log_string(string)": EventFragment;
    "log_uint(uint256)": EventFragment;
    "logs(bytes)": EventFragment;
    "oracleFlaxValueOfEth(uint256)": EventFragment;
    "planID(uint256)": EventFragment;
    "priceGrowth(uint256)": EventFragment;
    "tiltGrowth(uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "amountOut"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ethPurchased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "flaxPerEth"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_address"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_array(uint256[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_array(int256[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_array(address[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_bytes"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_bytes32"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_address"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "log_named_array(string,uint256[])"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "log_named_array(string,int256[])"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "log_named_array(string,address[])"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_bytes"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_bytes32"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_decimal_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_decimal_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_string"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_string"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "logs"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "oracleFlaxValueOfEth"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "planID"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "priceGrowth"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "tiltGrowth"): EventFragment;
}

export interface amountOutEventObject {
  amount: BigNumber;
}
export type amountOutEvent = TypedEvent<[BigNumber], amountOutEventObject>;

export type amountOutEventFilter = TypedEventFilter<amountOutEvent>;

export interface ethPurchasedEventObject {
  eth: BigNumber;
  reserveRemaining: BigNumber;
}
export type ethPurchasedEvent = TypedEvent<
  [BigNumber, BigNumber],
  ethPurchasedEventObject
>;

export type ethPurchasedEventFilter = TypedEventFilter<ethPurchasedEvent>;

export interface flaxPerEthEventObject {
  oracleVal: BigNumber;
  average: BigNumber;
}
export type flaxPerEthEvent = TypedEvent<
  [BigNumber, BigNumber],
  flaxPerEthEventObject
>;

export type flaxPerEthEventFilter = TypedEventFilter<flaxPerEthEvent>;

export interface logEventObject {
  arg0: string;
}
export type logEvent = TypedEvent<[string], logEventObject>;

export type logEventFilter = TypedEventFilter<logEvent>;

export interface log_addressEventObject {
  arg0: string;
}
export type log_addressEvent = TypedEvent<[string], log_addressEventObject>;

export type log_addressEventFilter = TypedEventFilter<log_addressEvent>;

export interface log_array_uint256_array_EventObject {
  val: BigNumber[];
}
export type log_array_uint256_array_Event = TypedEvent<
  [BigNumber[]],
  log_array_uint256_array_EventObject
>;

export type log_array_uint256_array_EventFilter =
  TypedEventFilter<log_array_uint256_array_Event>;

export interface log_array_int256_array_EventObject {
  val: BigNumber[];
}
export type log_array_int256_array_Event = TypedEvent<
  [BigNumber[]],
  log_array_int256_array_EventObject
>;

export type log_array_int256_array_EventFilter =
  TypedEventFilter<log_array_int256_array_Event>;

export interface log_array_address_array_EventObject {
  val: string[];
}
export type log_array_address_array_Event = TypedEvent<
  [string[]],
  log_array_address_array_EventObject
>;

export type log_array_address_array_EventFilter =
  TypedEventFilter<log_array_address_array_Event>;

export interface log_bytesEventObject {
  arg0: string;
}
export type log_bytesEvent = TypedEvent<[string], log_bytesEventObject>;

export type log_bytesEventFilter = TypedEventFilter<log_bytesEvent>;

export interface log_bytes32EventObject {
  arg0: string;
}
export type log_bytes32Event = TypedEvent<[string], log_bytes32EventObject>;

export type log_bytes32EventFilter = TypedEventFilter<log_bytes32Event>;

export interface log_intEventObject {
  arg0: BigNumber;
}
export type log_intEvent = TypedEvent<[BigNumber], log_intEventObject>;

export type log_intEventFilter = TypedEventFilter<log_intEvent>;

export interface log_named_addressEventObject {
  key: string;
  val: string;
}
export type log_named_addressEvent = TypedEvent<
  [string, string],
  log_named_addressEventObject
>;

export type log_named_addressEventFilter =
  TypedEventFilter<log_named_addressEvent>;

export interface log_named_array_string_uint256_array_EventObject {
  key: string;
  val: BigNumber[];
}
export type log_named_array_string_uint256_array_Event = TypedEvent<
  [string, BigNumber[]],
  log_named_array_string_uint256_array_EventObject
>;

export type log_named_array_string_uint256_array_EventFilter =
  TypedEventFilter<log_named_array_string_uint256_array_Event>;

export interface log_named_array_string_int256_array_EventObject {
  key: string;
  val: BigNumber[];
}
export type log_named_array_string_int256_array_Event = TypedEvent<
  [string, BigNumber[]],
  log_named_array_string_int256_array_EventObject
>;

export type log_named_array_string_int256_array_EventFilter =
  TypedEventFilter<log_named_array_string_int256_array_Event>;

export interface log_named_array_string_address_array_EventObject {
  key: string;
  val: string[];
}
export type log_named_array_string_address_array_Event = TypedEvent<
  [string, string[]],
  log_named_array_string_address_array_EventObject
>;

export type log_named_array_string_address_array_EventFilter =
  TypedEventFilter<log_named_array_string_address_array_Event>;

export interface log_named_bytesEventObject {
  key: string;
  val: string;
}
export type log_named_bytesEvent = TypedEvent<
  [string, string],
  log_named_bytesEventObject
>;

export type log_named_bytesEventFilter = TypedEventFilter<log_named_bytesEvent>;

export interface log_named_bytes32EventObject {
  key: string;
  val: string;
}
export type log_named_bytes32Event = TypedEvent<
  [string, string],
  log_named_bytes32EventObject
>;

export type log_named_bytes32EventFilter =
  TypedEventFilter<log_named_bytes32Event>;

export interface log_named_decimal_intEventObject {
  key: string;
  val: BigNumber;
  decimals: BigNumber;
}
export type log_named_decimal_intEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  log_named_decimal_intEventObject
>;

export type log_named_decimal_intEventFilter =
  TypedEventFilter<log_named_decimal_intEvent>;

export interface log_named_decimal_uintEventObject {
  key: string;
  val: BigNumber;
  decimals: BigNumber;
}
export type log_named_decimal_uintEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  log_named_decimal_uintEventObject
>;

export type log_named_decimal_uintEventFilter =
  TypedEventFilter<log_named_decimal_uintEvent>;

export interface log_named_intEventObject {
  key: string;
  val: BigNumber;
}
export type log_named_intEvent = TypedEvent<
  [string, BigNumber],
  log_named_intEventObject
>;

export type log_named_intEventFilter = TypedEventFilter<log_named_intEvent>;

export interface log_named_stringEventObject {
  key: string;
  val: string;
}
export type log_named_stringEvent = TypedEvent<
  [string, string],
  log_named_stringEventObject
>;

export type log_named_stringEventFilter =
  TypedEventFilter<log_named_stringEvent>;

export interface log_named_uintEventObject {
  key: string;
  val: BigNumber;
}
export type log_named_uintEvent = TypedEvent<
  [string, BigNumber],
  log_named_uintEventObject
>;

export type log_named_uintEventFilter = TypedEventFilter<log_named_uintEvent>;

export interface log_stringEventObject {
  arg0: string;
}
export type log_stringEvent = TypedEvent<[string], log_stringEventObject>;

export type log_stringEventFilter = TypedEventFilter<log_stringEvent>;

export interface log_uintEventObject {
  arg0: BigNumber;
}
export type log_uintEvent = TypedEvent<[BigNumber], log_uintEventObject>;

export type log_uintEventFilter = TypedEventFilter<log_uintEvent>;

export interface logsEventObject {
  arg0: string;
}
export type logsEvent = TypedEvent<[string], logsEventObject>;

export type logsEventFilter = TypedEventFilter<logsEvent>;

export interface oracleFlaxValueOfEthEventObject {
  val: BigNumber;
}
export type oracleFlaxValueOfEthEvent = TypedEvent<
  [BigNumber],
  oracleFlaxValueOfEthEventObject
>;

export type oracleFlaxValueOfEthEventFilter =
  TypedEventFilter<oracleFlaxValueOfEthEvent>;

export interface planIDEventObject {
  id: BigNumber;
}
export type planIDEvent = TypedEvent<[BigNumber], planIDEventObject>;

export type planIDEventFilter = TypedEventFilter<planIDEvent>;

export interface priceGrowthEventObject {
  growth: BigNumber;
}
export type priceGrowthEvent = TypedEvent<[BigNumber], priceGrowthEventObject>;

export type priceGrowthEventFilter = TypedEventFilter<priceGrowthEvent>;

export interface tiltGrowthEventObject {
  roi: BigNumber;
  priceGrowth: BigNumber;
  wethGrowth: BigNumber;
}
export type tiltGrowthEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  tiltGrowthEventObject
>;

export type tiltGrowthEventFilter = TypedEventFilter<tiltGrowthEvent>;

export interface Tilt extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TiltInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    IS_TEST(overrides?: CallOverrides): Promise<[boolean]>;

    excludeArtifacts(
      overrides?: CallOverrides
    ): Promise<[string[]] & { excludedArtifacts_: string[] }>;

    excludeContracts(
      overrides?: CallOverrides
    ): Promise<[string[]] & { excludedContracts_: string[] }>;

    excludeSenders(
      overrides?: CallOverrides
    ): Promise<[string[]] & { excludedSenders_: string[] }>;

    failed(overrides?: CallOverrides): Promise<[boolean]>;

    getEnvUint(key: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    roiArray(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setUp(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    targetArtifactSelectors(
      overrides?: CallOverrides
    ): Promise<
      [StdInvariant.FuzzArtifactSelectorStructOutput[]] & {
        targetedArtifactSelectors_: StdInvariant.FuzzArtifactSelectorStructOutput[];
      }
    >;

    targetArtifacts(
      overrides?: CallOverrides
    ): Promise<[string[]] & { targetedArtifacts_: string[] }>;

    targetContracts(
      overrides?: CallOverrides
    ): Promise<[string[]] & { targetedContracts_: string[] }>;

    targetInterfaces(
      overrides?: CallOverrides
    ): Promise<
      [StdInvariant.FuzzInterfaceStructOutput[]] & {
        targetedInterfaces_: StdInvariant.FuzzInterfaceStructOutput[];
      }
    >;

    targetSelectors(
      overrides?: CallOverrides
    ): Promise<
      [StdInvariant.FuzzSelectorStructOutput[]] & {
        targetedSelectors_: StdInvariant.FuzzSelectorStructOutput[];
      }
    >;

    targetSenders(
      overrides?: CallOverrides
    ): Promise<[string[]] & { targetedSenders_: string[] }>;

    termLength(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    test2xFlxDeduction(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testAddingFlaxToTilterAsNotOwnerFails(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testChoice0(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testChoice1(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testChoice2(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testChoice3(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testChoice4(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testEthWhale(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testInvalidTermChoiceFails(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testMinimumEth(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testRepeatTilting(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testSetupWorked(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testTooLittleEthFails(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    test_try_tilt_by_adding_flax_via_regular_ERC20_transfer(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  IS_TEST(overrides?: CallOverrides): Promise<boolean>;

  excludeArtifacts(overrides?: CallOverrides): Promise<string[]>;

  excludeContracts(overrides?: CallOverrides): Promise<string[]>;

  excludeSenders(overrides?: CallOverrides): Promise<string[]>;

  failed(overrides?: CallOverrides): Promise<boolean>;

  getEnvUint(key: string, overrides?: CallOverrides): Promise<BigNumber>;

  roiArray(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  setUp(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  targetArtifactSelectors(
    overrides?: CallOverrides
  ): Promise<StdInvariant.FuzzArtifactSelectorStructOutput[]>;

  targetArtifacts(overrides?: CallOverrides): Promise<string[]>;

  targetContracts(overrides?: CallOverrides): Promise<string[]>;

  targetInterfaces(
    overrides?: CallOverrides
  ): Promise<StdInvariant.FuzzInterfaceStructOutput[]>;

  targetSelectors(
    overrides?: CallOverrides
  ): Promise<StdInvariant.FuzzSelectorStructOutput[]>;

  targetSenders(overrides?: CallOverrides): Promise<string[]>;

  termLength(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  test2xFlxDeduction(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testAddingFlaxToTilterAsNotOwnerFails(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testChoice0(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testChoice1(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testChoice2(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testChoice3(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testChoice4(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testEthWhale(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testInvalidTermChoiceFails(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testMinimumEth(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testRepeatTilting(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testSetupWorked(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testTooLittleEthFails(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  test_try_tilt_by_adding_flax_via_regular_ERC20_transfer(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    IS_TEST(overrides?: CallOverrides): Promise<boolean>;

    excludeArtifacts(overrides?: CallOverrides): Promise<string[]>;

    excludeContracts(overrides?: CallOverrides): Promise<string[]>;

    excludeSenders(overrides?: CallOverrides): Promise<string[]>;

    failed(overrides?: CallOverrides): Promise<boolean>;

    getEnvUint(key: string, overrides?: CallOverrides): Promise<BigNumber>;

    roiArray(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    setUp(overrides?: CallOverrides): Promise<void>;

    targetArtifactSelectors(
      overrides?: CallOverrides
    ): Promise<StdInvariant.FuzzArtifactSelectorStructOutput[]>;

    targetArtifacts(overrides?: CallOverrides): Promise<string[]>;

    targetContracts(overrides?: CallOverrides): Promise<string[]>;

    targetInterfaces(
      overrides?: CallOverrides
    ): Promise<StdInvariant.FuzzInterfaceStructOutput[]>;

    targetSelectors(
      overrides?: CallOverrides
    ): Promise<StdInvariant.FuzzSelectorStructOutput[]>;

    targetSenders(overrides?: CallOverrides): Promise<string[]>;

    termLength(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    test2xFlxDeduction(overrides?: CallOverrides): Promise<void>;

    testAddingFlaxToTilterAsNotOwnerFails(
      overrides?: CallOverrides
    ): Promise<void>;

    testChoice0(overrides?: CallOverrides): Promise<void>;

    testChoice1(overrides?: CallOverrides): Promise<void>;

    testChoice2(overrides?: CallOverrides): Promise<void>;

    testChoice3(overrides?: CallOverrides): Promise<void>;

    testChoice4(overrides?: CallOverrides): Promise<void>;

    testEthWhale(overrides?: CallOverrides): Promise<void>;

    testInvalidTermChoiceFails(overrides?: CallOverrides): Promise<void>;

    testMinimumEth(overrides?: CallOverrides): Promise<void>;

    testRepeatTilting(overrides?: CallOverrides): Promise<void>;

    testSetupWorked(overrides?: CallOverrides): Promise<void>;

    testTooLittleEthFails(overrides?: CallOverrides): Promise<void>;

    test_try_tilt_by_adding_flax_via_regular_ERC20_transfer(
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "amountOut(uint256)"(amount?: null): amountOutEventFilter;
    amountOut(amount?: null): amountOutEventFilter;

    "ethPurchased(uint256,uint256)"(
      eth?: null,
      reserveRemaining?: null
    ): ethPurchasedEventFilter;
    ethPurchased(eth?: null, reserveRemaining?: null): ethPurchasedEventFilter;

    "flaxPerEth(uint256,uint256)"(
      oracleVal?: null,
      average?: null
    ): flaxPerEthEventFilter;
    flaxPerEth(oracleVal?: null, average?: null): flaxPerEthEventFilter;

    "log(string)"(arg0?: null): logEventFilter;
    log(arg0?: null): logEventFilter;

    "log_address(address)"(arg0?: null): log_addressEventFilter;
    log_address(arg0?: null): log_addressEventFilter;

    "log_array(uint256[])"(val?: null): log_array_uint256_array_EventFilter;
    "log_array(int256[])"(val?: null): log_array_int256_array_EventFilter;
    "log_array(address[])"(val?: null): log_array_address_array_EventFilter;

    "log_bytes(bytes)"(arg0?: null): log_bytesEventFilter;
    log_bytes(arg0?: null): log_bytesEventFilter;

    "log_bytes32(bytes32)"(arg0?: null): log_bytes32EventFilter;
    log_bytes32(arg0?: null): log_bytes32EventFilter;

    "log_int(int256)"(arg0?: null): log_intEventFilter;
    log_int(arg0?: null): log_intEventFilter;

    "log_named_address(string,address)"(
      key?: null,
      val?: null
    ): log_named_addressEventFilter;
    log_named_address(key?: null, val?: null): log_named_addressEventFilter;

    "log_named_array(string,uint256[])"(
      key?: null,
      val?: null
    ): log_named_array_string_uint256_array_EventFilter;
    "log_named_array(string,int256[])"(
      key?: null,
      val?: null
    ): log_named_array_string_int256_array_EventFilter;
    "log_named_array(string,address[])"(
      key?: null,
      val?: null
    ): log_named_array_string_address_array_EventFilter;

    "log_named_bytes(string,bytes)"(
      key?: null,
      val?: null
    ): log_named_bytesEventFilter;
    log_named_bytes(key?: null, val?: null): log_named_bytesEventFilter;

    "log_named_bytes32(string,bytes32)"(
      key?: null,
      val?: null
    ): log_named_bytes32EventFilter;
    log_named_bytes32(key?: null, val?: null): log_named_bytes32EventFilter;

    "log_named_decimal_int(string,int256,uint256)"(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_intEventFilter;
    log_named_decimal_int(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_intEventFilter;

    "log_named_decimal_uint(string,uint256,uint256)"(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_uintEventFilter;
    log_named_decimal_uint(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_uintEventFilter;

    "log_named_int(string,int256)"(
      key?: null,
      val?: null
    ): log_named_intEventFilter;
    log_named_int(key?: null, val?: null): log_named_intEventFilter;

    "log_named_string(string,string)"(
      key?: null,
      val?: null
    ): log_named_stringEventFilter;
    log_named_string(key?: null, val?: null): log_named_stringEventFilter;

    "log_named_uint(string,uint256)"(
      key?: null,
      val?: null
    ): log_named_uintEventFilter;
    log_named_uint(key?: null, val?: null): log_named_uintEventFilter;

    "log_string(string)"(arg0?: null): log_stringEventFilter;
    log_string(arg0?: null): log_stringEventFilter;

    "log_uint(uint256)"(arg0?: null): log_uintEventFilter;
    log_uint(arg0?: null): log_uintEventFilter;

    "logs(bytes)"(arg0?: null): logsEventFilter;
    logs(arg0?: null): logsEventFilter;

    "oracleFlaxValueOfEth(uint256)"(
      val?: null
    ): oracleFlaxValueOfEthEventFilter;
    oracleFlaxValueOfEth(val?: null): oracleFlaxValueOfEthEventFilter;

    "planID(uint256)"(id?: null): planIDEventFilter;
    planID(id?: null): planIDEventFilter;

    "priceGrowth(uint256)"(growth?: null): priceGrowthEventFilter;
    priceGrowth(growth?: null): priceGrowthEventFilter;

    "tiltGrowth(uint256,uint256,uint256)"(
      roi?: null,
      priceGrowth?: null,
      wethGrowth?: null
    ): tiltGrowthEventFilter;
    tiltGrowth(
      roi?: null,
      priceGrowth?: null,
      wethGrowth?: null
    ): tiltGrowthEventFilter;
  };

  estimateGas: {
    IS_TEST(overrides?: CallOverrides): Promise<BigNumber>;

    excludeArtifacts(overrides?: CallOverrides): Promise<BigNumber>;

    excludeContracts(overrides?: CallOverrides): Promise<BigNumber>;

    excludeSenders(overrides?: CallOverrides): Promise<BigNumber>;

    failed(overrides?: CallOverrides): Promise<BigNumber>;

    getEnvUint(key: string, overrides?: CallOverrides): Promise<BigNumber>;

    roiArray(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    setUp(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    targetArtifactSelectors(overrides?: CallOverrides): Promise<BigNumber>;

    targetArtifacts(overrides?: CallOverrides): Promise<BigNumber>;

    targetContracts(overrides?: CallOverrides): Promise<BigNumber>;

    targetInterfaces(overrides?: CallOverrides): Promise<BigNumber>;

    targetSelectors(overrides?: CallOverrides): Promise<BigNumber>;

    targetSenders(overrides?: CallOverrides): Promise<BigNumber>;

    termLength(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    test2xFlxDeduction(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testAddingFlaxToTilterAsNotOwnerFails(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testChoice0(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    testChoice1(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    testChoice2(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    testChoice3(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    testChoice4(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    testEthWhale(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    testInvalidTermChoiceFails(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testMinimumEth(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testRepeatTilting(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testSetupWorked(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testTooLittleEthFails(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    test_try_tilt_by_adding_flax_via_regular_ERC20_transfer(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    IS_TEST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    excludeArtifacts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    excludeContracts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    excludeSenders(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    failed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEnvUint(
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    roiArray(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setUp(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    targetArtifactSelectors(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    targetArtifacts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetContracts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetInterfaces(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetSelectors(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetSenders(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    termLength(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    test2xFlxDeduction(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testAddingFlaxToTilterAsNotOwnerFails(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testChoice0(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testChoice1(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testChoice2(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testChoice3(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testChoice4(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testEthWhale(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testInvalidTermChoiceFails(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testMinimumEth(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testRepeatTilting(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testSetupWorked(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testTooLittleEthFails(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    test_try_tilt_by_adding_flax_via_regular_ERC20_transfer(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
