/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface UniPriceFetcherInterface extends utils.Interface {
  functions: {
    "daiPriceOfBaseToken(address,bool)": FunctionFragment;
    "daiPriceOfToken(address)": FunctionFragment;
    "daiPriceOfTokens(address[])": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setTokenTypeMap(address[],uint8[])": FunctionFragment;
    "tokenTypeMap(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "wethPriceOfBaseToken(address,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "daiPriceOfBaseToken"
      | "daiPriceOfToken"
      | "daiPriceOfTokens"
      | "owner"
      | "renounceOwnership"
      | "setTokenTypeMap"
      | "tokenTypeMap"
      | "transferOwnership"
      | "wethPriceOfBaseToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "daiPriceOfBaseToken",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "daiPriceOfToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "daiPriceOfTokens",
    values: [string[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenTypeMap",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenTypeMap",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "wethPriceOfBaseToken",
    values: [string, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "daiPriceOfBaseToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "daiPriceOfToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "daiPriceOfTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenTypeMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenTypeMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wethPriceOfBaseToken",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface UniPriceFetcher extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UniPriceFetcherInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    daiPriceOfBaseToken(
      token: string,
      isEth: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    daiPriceOfToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    daiPriceOfTokens(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { prices: BigNumber[] }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setTokenTypeMap(
      tokens: string[],
      types: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    tokenTypeMap(arg0: string, overrides?: CallOverrides): Promise<[number]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    wethPriceOfBaseToken(
      token: string,
      isEth: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  daiPriceOfBaseToken(
    token: string,
    isEth: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  daiPriceOfToken(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  daiPriceOfTokens(
    tokens: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setTokenTypeMap(
    tokens: string[],
    types: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  tokenTypeMap(arg0: string, overrides?: CallOverrides): Promise<number>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  wethPriceOfBaseToken(
    token: string,
    isEth: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    daiPriceOfBaseToken(
      token: string,
      isEth: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    daiPriceOfToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    daiPriceOfTokens(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setTokenTypeMap(
      tokens: string[],
      types: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    tokenTypeMap(arg0: string, overrides?: CallOverrides): Promise<number>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    wethPriceOfBaseToken(
      token: string,
      isEth: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    daiPriceOfBaseToken(
      token: string,
      isEth: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    daiPriceOfToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    daiPriceOfTokens(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setTokenTypeMap(
      tokens: string[],
      types: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    tokenTypeMap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    wethPriceOfBaseToken(
      token: string,
      isEth: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    daiPriceOfBaseToken(
      token: string,
      isEth: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    daiPriceOfToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    daiPriceOfTokens(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setTokenTypeMap(
      tokens: string[],
      types: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    tokenTypeMap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    wethPriceOfBaseToken(
      token: string,
      isEth: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
