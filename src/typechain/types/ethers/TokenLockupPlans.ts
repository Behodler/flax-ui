/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface TokenLockupPlansInterface extends utils.Interface {
  functions: {
    "approve(address,uint256)": FunctionFragment;
    "approveDelegator(address,uint256)": FunctionFragment;
    "approveSpenderDelegator(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "balanceOfDelegate(address)": FunctionFragment;
    "baseURI()": FunctionFragment;
    "combinePlans(uint256,uint256)": FunctionFragment;
    "createPlan(address,address,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "delegate(uint256,address)": FunctionFragment;
    "delegateAll(address,address)": FunctionFragment;
    "delegatePlans(uint256[],address[])": FunctionFragment;
    "delegatedBalances(address,address)": FunctionFragment;
    "delegatedTo(uint256)": FunctionFragment;
    "deleteAdmin()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getApprovedDelegator(uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isApprovedForAllDelegation(address,address)": FunctionFragment;
    "lockedBalances(address,address)": FunctionFragment;
    "name()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "partialRedeemPlans(uint256[],uint256)": FunctionFragment;
    "planBalanceOf(uint256,uint256,uint256)": FunctionFragment;
    "planEnd(uint256)": FunctionFragment;
    "plans(uint256)": FunctionFragment;
    "redeemAllPlans()": FunctionFragment;
    "redeemPlans(uint256[])": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,bytes)": FunctionFragment;
    "segmentAndDelegatePlans(uint256,uint256[],address[])": FunctionFragment;
    "segmentOriginalEnd(uint256)": FunctionFragment;
    "segmentPlan(uint256,uint256[])": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setApprovalForAllDelegation(address,bool)": FunctionFragment;
    "setApprovalForOperator(address,bool)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenByIndex(uint256)": FunctionFragment;
    "tokenOfDelegateByIndex(address,uint256)": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferAndDelegate(uint256,address,address)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "updateBaseURI(string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "approve"
      | "approveDelegator"
      | "approveSpenderDelegator"
      | "balanceOf"
      | "balanceOfDelegate"
      | "baseURI"
      | "combinePlans"
      | "createPlan"
      | "delegate"
      | "delegateAll"
      | "delegatePlans"
      | "delegatedBalances"
      | "delegatedTo"
      | "deleteAdmin"
      | "getApproved"
      | "getApprovedDelegator"
      | "isApprovedForAll"
      | "isApprovedForAllDelegation"
      | "lockedBalances"
      | "name"
      | "ownerOf"
      | "partialRedeemPlans"
      | "planBalanceOf"
      | "planEnd"
      | "plans"
      | "redeemAllPlans"
      | "redeemPlans"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "segmentAndDelegatePlans"
      | "segmentOriginalEnd"
      | "segmentPlan"
      | "setApprovalForAll"
      | "setApprovalForAllDelegation"
      | "setApprovalForOperator"
      | "supportsInterface"
      | "symbol"
      | "tokenByIndex"
      | "tokenOfDelegateByIndex"
      | "tokenOfOwnerByIndex"
      | "tokenURI"
      | "totalSupply"
      | "transferAndDelegate"
      | "transferFrom"
      | "updateBaseURI"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveDelegator",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveSpenderDelegator",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "balanceOfDelegate",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "baseURI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "combinePlans",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createPlan",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "delegate",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "delegatePlans",
    values: [BigNumberish[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "delegatedBalances",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "delegatedTo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApprovedDelegator",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAllDelegation",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedBalances",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "partialRedeemPlans",
    values: [BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "planBalanceOf",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "planEnd",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "plans", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "redeemAllPlans",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemPlans",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "segmentAndDelegatePlans",
    values: [BigNumberish, BigNumberish[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "segmentOriginalEnd",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "segmentPlan",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAllDelegation",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForOperator",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfDelegateByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferAndDelegate",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBaseURI",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveDelegator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveSpenderDelegator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "baseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "combinePlans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createPlan", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegateAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegatePlans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegatedBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegatedTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApprovedDelegator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAllDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "partialRedeemPlans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "planBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "planEnd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "plans", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemAllPlans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemPlans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "segmentAndDelegatePlans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "segmentOriginalEnd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "segmentPlan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAllDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfDelegateByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferAndDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBaseURI",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "ApprovalForAllDelegation(address,address,bool)": EventFragment;
    "DelegateRemoved(uint256,address)": EventFragment;
    "DelegatorApproved(uint256,address,address)": EventFragment;
    "PlanCreated(uint256,address,address,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "PlanRedeemed(uint256,uint256,uint256,uint256)": EventFragment;
    "PlanSegmented(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "PlansCombined(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "TokenDelegated(uint256,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "URIAdminDeleted(address)": EventFragment;
    "URISet(string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAllDelegation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelegateRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelegatorApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlanCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlanRedeemed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlanSegmented"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlansCombined"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenDelegated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URIAdminDeleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URISet"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface ApprovalForAllDelegationEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllDelegationEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllDelegationEventObject
>;

export type ApprovalForAllDelegationEventFilter =
  TypedEventFilter<ApprovalForAllDelegationEvent>;

export interface DelegateRemovedEventObject {
  tokenId: BigNumber;
  delegate: string;
}
export type DelegateRemovedEvent = TypedEvent<
  [BigNumber, string],
  DelegateRemovedEventObject
>;

export type DelegateRemovedEventFilter = TypedEventFilter<DelegateRemovedEvent>;

export interface DelegatorApprovedEventObject {
  id: BigNumber;
  owner: string;
  delegator: string;
}
export type DelegatorApprovedEvent = TypedEvent<
  [BigNumber, string, string],
  DelegatorApprovedEventObject
>;

export type DelegatorApprovedEventFilter =
  TypedEventFilter<DelegatorApprovedEvent>;

export interface PlanCreatedEventObject {
  id: BigNumber;
  recipient: string;
  token: string;
  amount: BigNumber;
  start: BigNumber;
  cliff: BigNumber;
  end: BigNumber;
  rate: BigNumber;
  period: BigNumber;
}
export type PlanCreatedEvent = TypedEvent<
  [
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  PlanCreatedEventObject
>;

export type PlanCreatedEventFilter = TypedEventFilter<PlanCreatedEvent>;

export interface PlanRedeemedEventObject {
  id: BigNumber;
  amountRedeemed: BigNumber;
  planRemainder: BigNumber;
  resetDate: BigNumber;
}
export type PlanRedeemedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  PlanRedeemedEventObject
>;

export type PlanRedeemedEventFilter = TypedEventFilter<PlanRedeemedEvent>;

export interface PlanSegmentedEventObject {
  id: BigNumber;
  segmentId: BigNumber;
  newPlanAmount: BigNumber;
  newPlanRate: BigNumber;
  segmentAmount: BigNumber;
  segmentRate: BigNumber;
  start: BigNumber;
  cliff: BigNumber;
  period: BigNumber;
  newPlanEnd: BigNumber;
  segmentEnd: BigNumber;
}
export type PlanSegmentedEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  PlanSegmentedEventObject
>;

export type PlanSegmentedEventFilter = TypedEventFilter<PlanSegmentedEvent>;

export interface PlansCombinedEventObject {
  id0: BigNumber;
  id1: BigNumber;
  survivingId: BigNumber;
  amount: BigNumber;
  rate: BigNumber;
  start: BigNumber;
  cliff: BigNumber;
  period: BigNumber;
  end: BigNumber;
}
export type PlansCombinedEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  PlansCombinedEventObject
>;

export type PlansCombinedEventFilter = TypedEventFilter<PlansCombinedEvent>;

export interface TokenDelegatedEventObject {
  tokenId: BigNumber;
  delegate: string;
}
export type TokenDelegatedEvent = TypedEvent<
  [BigNumber, string],
  TokenDelegatedEventObject
>;

export type TokenDelegatedEventFilter = TypedEventFilter<TokenDelegatedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface URIAdminDeletedEventObject {
  _admin: string;
}
export type URIAdminDeletedEvent = TypedEvent<
  [string],
  URIAdminDeletedEventObject
>;

export type URIAdminDeletedEventFilter = TypedEventFilter<URIAdminDeletedEvent>;

export interface URISetEventObject {
  newURI: string;
}
export type URISetEvent = TypedEvent<[string], URISetEventObject>;

export type URISetEventFilter = TypedEventFilter<URISetEvent>;

export interface TokenLockupPlans extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TokenLockupPlansInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    approveDelegator(
      delegator: string,
      planId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    approveSpenderDelegator(
      spender: string,
      planId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOfDelegate(
      delegate: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    baseURI(overrides?: CallOverrides): Promise<[string]>;

    combinePlans(
      planId0: BigNumberish,
      planId1: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    createPlan(
      recipient: string,
      token: string,
      amount: BigNumberish,
      start: BigNumberish,
      cliff: BigNumberish,
      rate: BigNumberish,
      period: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    delegate(
      planId: BigNumberish,
      delegatee: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    delegateAll(
      token: string,
      delegatee: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    delegatePlans(
      planIds: BigNumberish[],
      delegatees: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    delegatedBalances(
      delegatee: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { delegatedBalance: BigNumber }>;

    delegatedTo(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    deleteAdmin(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getApprovedDelegator(
      planId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isApprovedForAllDelegation(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lockedBalances(
      holder: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { lockedBalance: BigNumber }>;

    name(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    partialRedeemPlans(
      planIds: BigNumberish[],
      redemptionTime: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    planBalanceOf(
      planId: BigNumberish,
      timeStamp: BigNumberish,
      redemptionTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        balance: BigNumber;
        remainder: BigNumber;
        latestUnlock: BigNumber;
      }
    >;

    planEnd(
      planId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { end: BigNumber }>;

    plans(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        token: string;
        amount: BigNumber;
        start: BigNumber;
        cliff: BigNumber;
        rate: BigNumber;
        period: BigNumber;
      }
    >;

    redeemAllPlans(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    redeemPlans(
      planIds: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    segmentAndDelegatePlans(
      planId: BigNumberish,
      segmentAmounts: BigNumberish[],
      delegatees: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    segmentOriginalEnd(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    segmentPlan(
      planId: BigNumberish,
      segmentAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setApprovalForAllDelegation(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setApprovalForOperator(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenOfDelegateByIndex(
      delegate: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferAndDelegate(
      planId: BigNumberish,
      from: string,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateBaseURI(
      _uri: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  approveDelegator(
    delegator: string,
    planId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  approveSpenderDelegator(
    spender: string,
    planId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  balanceOfDelegate(
    delegate: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  baseURI(overrides?: CallOverrides): Promise<string>;

  combinePlans(
    planId0: BigNumberish,
    planId1: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  createPlan(
    recipient: string,
    token: string,
    amount: BigNumberish,
    start: BigNumberish,
    cliff: BigNumberish,
    rate: BigNumberish,
    period: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  delegate(
    planId: BigNumberish,
    delegatee: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  delegateAll(
    token: string,
    delegatee: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  delegatePlans(
    planIds: BigNumberish[],
    delegatees: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  delegatedBalances(
    delegatee: string,
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  delegatedTo(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  deleteAdmin(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getApprovedDelegator(
    planId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isApprovedForAllDelegation(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lockedBalances(
    holder: string,
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  partialRedeemPlans(
    planIds: BigNumberish[],
    redemptionTime: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  planBalanceOf(
    planId: BigNumberish,
    timeStamp: BigNumberish,
    redemptionTime: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      balance: BigNumber;
      remainder: BigNumber;
      latestUnlock: BigNumber;
    }
  >;

  planEnd(planId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  plans(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      token: string;
      amount: BigNumber;
      start: BigNumber;
      cliff: BigNumber;
      rate: BigNumber;
      period: BigNumber;
    }
  >;

  redeemAllPlans(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  redeemPlans(
    planIds: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  segmentAndDelegatePlans(
    planId: BigNumberish,
    segmentAmounts: BigNumberish[],
    delegatees: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  segmentOriginalEnd(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  segmentPlan(
    planId: BigNumberish,
    segmentAmounts: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setApprovalForAllDelegation(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setApprovalForOperator(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenByIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenOfDelegateByIndex(
    delegate: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferAndDelegate(
    planId: BigNumberish,
    from: string,
    to: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateBaseURI(
    _uri: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    approveDelegator(
      delegator: string,
      planId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    approveSpenderDelegator(
      spender: string,
      planId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfDelegate(
      delegate: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<string>;

    combinePlans(
      planId0: BigNumberish,
      planId1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createPlan(
      recipient: string,
      token: string,
      amount: BigNumberish,
      start: BigNumberish,
      cliff: BigNumberish,
      rate: BigNumberish,
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delegate(
      planId: BigNumberish,
      delegatee: string,
      overrides?: CallOverrides
    ): Promise<void>;

    delegateAll(
      token: string,
      delegatee: string,
      overrides?: CallOverrides
    ): Promise<void>;

    delegatePlans(
      planIds: BigNumberish[],
      delegatees: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    delegatedBalances(
      delegatee: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delegatedTo(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    deleteAdmin(overrides?: CallOverrides): Promise<void>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getApprovedDelegator(
      planId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isApprovedForAllDelegation(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lockedBalances(
      holder: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    partialRedeemPlans(
      planIds: BigNumberish[],
      redemptionTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    planBalanceOf(
      planId: BigNumberish,
      timeStamp: BigNumberish,
      redemptionTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        balance: BigNumber;
        remainder: BigNumber;
        latestUnlock: BigNumber;
      }
    >;

    planEnd(
      planId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    plans(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        token: string;
        amount: BigNumber;
        start: BigNumber;
        cliff: BigNumber;
        rate: BigNumber;
        period: BigNumber;
      }
    >;

    redeemAllPlans(overrides?: CallOverrides): Promise<void>;

    redeemPlans(
      planIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    segmentAndDelegatePlans(
      planId: BigNumberish,
      segmentAmounts: BigNumberish[],
      delegatees: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    segmentOriginalEnd(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    segmentPlan(
      planId: BigNumberish,
      segmentAmounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAllDelegation(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForOperator(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfDelegateByIndex(
      delegate: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferAndDelegate(
      planId: BigNumberish,
      from: string,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateBaseURI(_uri: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "ApprovalForAllDelegation(address,address,bool)"(
      owner?: null,
      operator?: null,
      approved?: null
    ): ApprovalForAllDelegationEventFilter;
    ApprovalForAllDelegation(
      owner?: null,
      operator?: null,
      approved?: null
    ): ApprovalForAllDelegationEventFilter;

    "DelegateRemoved(uint256,address)"(
      tokenId?: BigNumberish | null,
      delegate?: string | null
    ): DelegateRemovedEventFilter;
    DelegateRemoved(
      tokenId?: BigNumberish | null,
      delegate?: string | null
    ): DelegateRemovedEventFilter;

    "DelegatorApproved(uint256,address,address)"(
      id?: BigNumberish | null,
      owner?: null,
      delegator?: null
    ): DelegatorApprovedEventFilter;
    DelegatorApproved(
      id?: BigNumberish | null,
      owner?: null,
      delegator?: null
    ): DelegatorApprovedEventFilter;

    "PlanCreated(uint256,address,address,uint256,uint256,uint256,uint256,uint256,uint256)"(
      id?: BigNumberish | null,
      recipient?: string | null,
      token?: string | null,
      amount?: null,
      start?: null,
      cliff?: null,
      end?: null,
      rate?: null,
      period?: null
    ): PlanCreatedEventFilter;
    PlanCreated(
      id?: BigNumberish | null,
      recipient?: string | null,
      token?: string | null,
      amount?: null,
      start?: null,
      cliff?: null,
      end?: null,
      rate?: null,
      period?: null
    ): PlanCreatedEventFilter;

    "PlanRedeemed(uint256,uint256,uint256,uint256)"(
      id?: BigNumberish | null,
      amountRedeemed?: null,
      planRemainder?: null,
      resetDate?: null
    ): PlanRedeemedEventFilter;
    PlanRedeemed(
      id?: BigNumberish | null,
      amountRedeemed?: null,
      planRemainder?: null,
      resetDate?: null
    ): PlanRedeemedEventFilter;

    "PlanSegmented(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      id?: BigNumberish | null,
      segmentId?: BigNumberish | null,
      newPlanAmount?: null,
      newPlanRate?: null,
      segmentAmount?: null,
      segmentRate?: null,
      start?: null,
      cliff?: null,
      period?: null,
      newPlanEnd?: null,
      segmentEnd?: null
    ): PlanSegmentedEventFilter;
    PlanSegmented(
      id?: BigNumberish | null,
      segmentId?: BigNumberish | null,
      newPlanAmount?: null,
      newPlanRate?: null,
      segmentAmount?: null,
      segmentRate?: null,
      start?: null,
      cliff?: null,
      period?: null,
      newPlanEnd?: null,
      segmentEnd?: null
    ): PlanSegmentedEventFilter;

    "PlansCombined(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      id0?: BigNumberish | null,
      id1?: BigNumberish | null,
      survivingId?: BigNumberish | null,
      amount?: null,
      rate?: null,
      start?: null,
      cliff?: null,
      period?: null,
      end?: null
    ): PlansCombinedEventFilter;
    PlansCombined(
      id0?: BigNumberish | null,
      id1?: BigNumberish | null,
      survivingId?: BigNumberish | null,
      amount?: null,
      rate?: null,
      start?: null,
      cliff?: null,
      period?: null,
      end?: null
    ): PlansCombinedEventFilter;

    "TokenDelegated(uint256,address)"(
      tokenId?: BigNumberish | null,
      delegate?: string | null
    ): TokenDelegatedEventFilter;
    TokenDelegated(
      tokenId?: BigNumberish | null,
      delegate?: string | null
    ): TokenDelegatedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;

    "URIAdminDeleted(address)"(_admin?: null): URIAdminDeletedEventFilter;
    URIAdminDeleted(_admin?: null): URIAdminDeletedEventFilter;

    "URISet(string)"(newURI?: null): URISetEventFilter;
    URISet(newURI?: null): URISetEventFilter;
  };

  estimateGas: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    approveDelegator(
      delegator: string,
      planId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    approveSpenderDelegator(
      spender: string,
      planId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfDelegate(
      delegate: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<BigNumber>;

    combinePlans(
      planId0: BigNumberish,
      planId1: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    createPlan(
      recipient: string,
      token: string,
      amount: BigNumberish,
      start: BigNumberish,
      cliff: BigNumberish,
      rate: BigNumberish,
      period: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    delegate(
      planId: BigNumberish,
      delegatee: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    delegateAll(
      token: string,
      delegatee: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    delegatePlans(
      planIds: BigNumberish[],
      delegatees: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    delegatedBalances(
      delegatee: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delegatedTo(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deleteAdmin(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApprovedDelegator(
      planId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAllDelegation(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedBalances(
      holder: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    partialRedeemPlans(
      planIds: BigNumberish[],
      redemptionTime: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    planBalanceOf(
      planId: BigNumberish,
      timeStamp: BigNumberish,
      redemptionTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    planEnd(
      planId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    plans(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    redeemAllPlans(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    redeemPlans(
      planIds: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    segmentAndDelegatePlans(
      planId: BigNumberish,
      segmentAmounts: BigNumberish[],
      delegatees: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    segmentOriginalEnd(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    segmentPlan(
      planId: BigNumberish,
      segmentAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setApprovalForAllDelegation(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setApprovalForOperator(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfDelegateByIndex(
      delegate: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferAndDelegate(
      planId: BigNumberish,
      from: string,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateBaseURI(
      _uri: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    approveDelegator(
      delegator: string,
      planId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    approveSpenderDelegator(
      spender: string,
      planId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfDelegate(
      delegate: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    combinePlans(
      planId0: BigNumberish,
      planId1: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createPlan(
      recipient: string,
      token: string,
      amount: BigNumberish,
      start: BigNumberish,
      cliff: BigNumberish,
      rate: BigNumberish,
      period: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    delegate(
      planId: BigNumberish,
      delegatee: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    delegateAll(
      token: string,
      delegatee: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    delegatePlans(
      planIds: BigNumberish[],
      delegatees: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    delegatedBalances(
      delegatee: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delegatedTo(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deleteAdmin(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApprovedDelegator(
      planId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAllDelegation(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockedBalances(
      holder: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    partialRedeemPlans(
      planIds: BigNumberish[],
      redemptionTime: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    planBalanceOf(
      planId: BigNumberish,
      timeStamp: BigNumberish,
      redemptionTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    planEnd(
      planId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    plans(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeemAllPlans(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    redeemPlans(
      planIds: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    segmentAndDelegatePlans(
      planId: BigNumberish,
      segmentAmounts: BigNumberish[],
      delegatees: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    segmentOriginalEnd(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    segmentPlan(
      planId: BigNumberish,
      segmentAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setApprovalForAllDelegation(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setApprovalForOperator(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenOfDelegateByIndex(
      delegate: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferAndDelegate(
      planId: BigNumberish,
      from: string,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateBaseURI(
      _uri: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
