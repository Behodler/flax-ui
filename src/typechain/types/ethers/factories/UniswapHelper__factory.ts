/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { UniswapHelper, UniswapHelperInterface } from "../UniswapHelper";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "flx",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "VARS",
    inputs: [],
    outputs: [
      {
        name: "minQuoteWaitDuration",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "factory",
        type: "address",
        internalType: "contract IUniswapV2Factory",
      },
      {
        name: "ref_token",
        type: "address",
        internalType: "address",
      },
      {
        name: "flax",
        type: "address",
        internalType: "address",
      },
      {
        name: "oracleSet",
        type: "tuple",
        internalType: "struct UniswapHelper.OracleSet",
        components: [
          {
            name: "flx_ref_token",
            type: "address",
            internalType: "contract IUniswapV2Pair",
          },
          {
            name: "oracle",
            type: "address",
            internalType: "contract LimboOracleLike",
          },
        ],
      },
      {
        name: "issuer",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "configure",
    inputs: [
      {
        name: "ref_token",
        type: "address",
        internalType: "address",
      },
      {
        name: "flx",
        type: "address",
        internalType: "address",
      },
      {
        name: "oracle",
        type: "address",
        internalType: "address",
      },
      {
        name: "issuer",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "owner",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "refValueOfTilt",
    inputs: [
      {
        name: "ref_amount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "preview",
        type: "bool",
        internalType: "bool",
      },
    ],
    outputs: [
      {
        name: "ref_value",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "lpTokens",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "renounceOwnership",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "safeFlaxBalance",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "transferFlaxIn",
    inputs: [
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "transferOwnership",
    inputs: [
      {
        name: "newOwner",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "OwnershipTransferred",
    inputs: [
      {
        name: "previousOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "newOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "OracleLPsNotSet",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "OwnableInvalidOwner",
    inputs: [
      {
        name: "owner",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "OwnableUnauthorizedAccount",
    inputs: [
      {
        name: "account",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "ReentrancyGuardReentrantCall",
    inputs: [],
  },
] as const;

export class UniswapHelper__factory {
  static readonly abi = _abi;
  static createInterface(): UniswapHelperInterface {
    return new utils.Interface(_abi) as UniswapHelperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UniswapHelper {
    return new Contract(address, _abi, signerOrProvider) as UniswapHelper;
  }
}
