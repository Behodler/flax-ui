/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface LimboOracleLikeInterface extends utils.Interface {
  functions: {
    "RegisterPair(address,uint256)": FunctionFragment;
    "consult(address,address,uint256,bool)": FunctionFragment;
    "factory()": FunctionFragment;
    "getLastUpdate(address,address)": FunctionFragment;
    "update(address)": FunctionFragment;
    "update(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "RegisterPair"
      | "consult"
      | "factory"
      | "getLastUpdate"
      | "update(address)"
      | "update(address,address)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "RegisterPair",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "consult",
    values: [string, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getLastUpdate",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "update(address)",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "update(address,address)",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "RegisterPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "consult", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLastUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "update(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "update(address,address)",
    data: BytesLike
  ): Result;

  events: {};
}

export interface LimboOracleLike extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LimboOracleLikeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    RegisterPair(
      pairAddress: string,
      period: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    consult(
      pricedToken: string,
      referenceToken: string,
      amountIn: BigNumberish,
      preview: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountOut: BigNumber }>;

    factory(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getLastUpdate(
      token1: string,
      token2: string,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber]>;

    "update(address)"(
      pair: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "update(address,address)"(
      token0: string,
      token1: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  RegisterPair(
    pairAddress: string,
    period: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  consult(
    pricedToken: string,
    referenceToken: string,
    amountIn: BigNumberish,
    preview: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  factory(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getLastUpdate(
    token1: string,
    token2: string,
    overrides?: CallOverrides
  ): Promise<[number, BigNumber]>;

  "update(address)"(
    pair: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "update(address,address)"(
    token0: string,
    token1: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    RegisterPair(
      pairAddress: string,
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    consult(
      pricedToken: string,
      referenceToken: string,
      amountIn: BigNumberish,
      preview: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<string>;

    getLastUpdate(
      token1: string,
      token2: string,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber]>;

    "update(address)"(pair: string, overrides?: CallOverrides): Promise<void>;

    "update(address,address)"(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    RegisterPair(
      pairAddress: string,
      period: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    consult(
      pricedToken: string,
      referenceToken: string,
      amountIn: BigNumberish,
      preview: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    factory(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    getLastUpdate(
      token1: string,
      token2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "update(address)"(
      pair: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "update(address,address)"(
      token0: string,
      token1: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    RegisterPair(
      pairAddress: string,
      period: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    consult(
      pricedToken: string,
      referenceToken: string,
      amountIn: BigNumberish,
      preview: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    factory(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getLastUpdate(
      token1: string,
      token2: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "update(address)"(
      pair: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "update(address,address)"(
      token0: string,
      token1: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
