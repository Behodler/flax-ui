/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface IssuerInterface extends utils.Interface {
  functions: {
    "MaxIssuancePerDay()": FunctionFragment;
    "couponContract()": FunctionFragment;
    "issuancePerTokenPerDay(address)": FunctionFragment;
    "issue(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setCouponContract(address)": FunctionFragment;
    "setMaxIssuancePerDay(uint256)": FunctionFragment;
    "setTokenInfo(address,bool,bool,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "whitelist(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MaxIssuancePerDay"
      | "couponContract"
      | "issuancePerTokenPerDay"
      | "issue"
      | "owner"
      | "renounceOwnership"
      | "setCouponContract"
      | "setMaxIssuancePerDay"
      | "setTokenInfo"
      | "transferOwnership"
      | "whitelist"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MaxIssuancePerDay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "couponContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "issuancePerTokenPerDay",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "issue",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCouponContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxIssuancePerDay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenInfo",
    values: [string, boolean, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "whitelist", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "MaxIssuancePerDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "couponContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issuancePerTokenPerDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "issue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCouponContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxIssuancePerDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;

  events: {
    "CouponsIssued(address,address,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TokenWhitelisted(address,bool,bool,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CouponsIssued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenWhitelisted"): EventFragment;
}

export interface CouponsIssuedEventObject {
  user: string;
  token: string;
  amount: BigNumber;
  coupons: BigNumber;
  runningAmount: BigNumber;
}
export type CouponsIssuedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  CouponsIssuedEventObject
>;

export type CouponsIssuedEventFilter = TypedEventFilter<CouponsIssuedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TokenWhitelistedEventObject {
  token: string;
  enabled: boolean;
  burnable: boolean;
  teraCouponPerToken: BigNumber;
}
export type TokenWhitelistedEvent = TypedEvent<
  [string, boolean, boolean, BigNumber],
  TokenWhitelistedEventObject
>;

export type TokenWhitelistedEventFilter =
  TypedEventFilter<TokenWhitelistedEvent>;

export interface Issuer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IssuerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MaxIssuancePerDay(overrides?: CallOverrides): Promise<[BigNumber]>;

    couponContract(overrides?: CallOverrides): Promise<[string]>;

    issuancePerTokenPerDay(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        runningAmount: BigNumber;
        lastIssuedAt: BigNumber;
      }
    >;

    issue(
      inputToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setCouponContract(
      newCouponAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setMaxIssuancePerDay(
      _maxIssuancePerDay: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setTokenInfo(
      token: string,
      enabled: boolean,
      burnable: boolean,
      teraCouponPerToken: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    whitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber] & {
        enabled: boolean;
        burnable: boolean;
        teraCouponPerToken: BigNumber;
      }
    >;
  };

  MaxIssuancePerDay(overrides?: CallOverrides): Promise<BigNumber>;

  couponContract(overrides?: CallOverrides): Promise<string>;

  issuancePerTokenPerDay(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      runningAmount: BigNumber;
      lastIssuedAt: BigNumber;
    }
  >;

  issue(
    inputToken: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setCouponContract(
    newCouponAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setMaxIssuancePerDay(
    _maxIssuancePerDay: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setTokenInfo(
    token: string,
    enabled: boolean,
    burnable: boolean,
    teraCouponPerToken: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  whitelist(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, BigNumber] & {
      enabled: boolean;
      burnable: boolean;
      teraCouponPerToken: BigNumber;
    }
  >;

  callStatic: {
    MaxIssuancePerDay(overrides?: CallOverrides): Promise<BigNumber>;

    couponContract(overrides?: CallOverrides): Promise<string>;

    issuancePerTokenPerDay(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        runningAmount: BigNumber;
        lastIssuedAt: BigNumber;
      }
    >;

    issue(
      inputToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setCouponContract(
      newCouponAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxIssuancePerDay(
      _maxIssuancePerDay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenInfo(
      token: string,
      enabled: boolean,
      burnable: boolean,
      teraCouponPerToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber] & {
        enabled: boolean;
        burnable: boolean;
        teraCouponPerToken: BigNumber;
      }
    >;
  };

  filters: {
    "CouponsIssued(address,address,uint256,uint256,uint256)"(
      user?: string | null,
      token?: string | null,
      amount?: null,
      coupons?: null,
      runningAmount?: null
    ): CouponsIssuedEventFilter;
    CouponsIssued(
      user?: string | null,
      token?: string | null,
      amount?: null,
      coupons?: null,
      runningAmount?: null
    ): CouponsIssuedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "TokenWhitelisted(address,bool,bool,uint256)"(
      token?: null,
      enabled?: null,
      burnable?: null,
      teraCouponPerToken?: null
    ): TokenWhitelistedEventFilter;
    TokenWhitelisted(
      token?: null,
      enabled?: null,
      burnable?: null,
      teraCouponPerToken?: null
    ): TokenWhitelistedEventFilter;
  };

  estimateGas: {
    MaxIssuancePerDay(overrides?: CallOverrides): Promise<BigNumber>;

    couponContract(overrides?: CallOverrides): Promise<BigNumber>;

    issuancePerTokenPerDay(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issue(
      inputToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setCouponContract(
      newCouponAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setMaxIssuancePerDay(
      _maxIssuancePerDay: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setTokenInfo(
      token: string,
      enabled: boolean,
      burnable: boolean,
      teraCouponPerToken: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    whitelist(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MaxIssuancePerDay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    couponContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    issuancePerTokenPerDay(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    issue(
      inputToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setCouponContract(
      newCouponAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setMaxIssuancePerDay(
      _maxIssuancePerDay: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setTokenInfo(
      token: string,
      enabled: boolean,
      burnable: boolean,
      teraCouponPerToken: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    whitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
